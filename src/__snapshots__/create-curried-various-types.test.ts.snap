// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generics + multi-parameters + return-generics should transform correctly with every option 1`] = `
"type $_00 = {
    <T, U>(fn: Morphism<T, U>, list: List<T>): $_list_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"list\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => $_list_11<U>;
    <T>(_fn: PH, list: List<T>): $_list_01<T>;
    <$SEL extends \\"01\\", $KIND extends \\"list\\">(): <T>(_fn: PH, list: List<T>) => $_list_01<T>;
    <T, U>(fn: Morphism<T, U>, functor: Functor<T>): $_functor_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"functor\\">(): <T, U>(fn: Morphism<T, U>, functor: Functor<T>) => $_functor_11<U>;
    <T>(_fn: PH, functor: Functor<T>): $_functor_01<T>;
    <$SEL extends \\"01\\", $KIND extends \\"functor\\">(): <T>(_fn: PH, functor: Functor<T>) => $_functor_01<T>;
    <T, U>(fn: Morphism<T, U>): $_10<T, U>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_10<T, U>;
};
type $_10<T, U> = {
    (list: List<T>): $_list_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): (list: List<T>) => $_list_11<U>;
    (functor: Functor<T>): $_functor_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"functor\\">(): (functor: Functor<T>) => $_functor_11<U>;
};
type $_list_01<T> = {
    <U>(fn: Morphism<T, U>): $_list_11<U>;
};
type $_functor_01<T> = {
    <U>(fn: Morphism<T, U>): $_functor_11<U>;
};
type $_list_11<U> = U[];
type $_functor_11<U> = Functor<U>;
"
`;

exports[`generics + multi-parameters + return-generics should transform correctly with placeholder 1`] = `
"type $_00 = {
    <T, U>(fn: Morphism<T, U>, list: List<T>): $_list_11<U>;
    <T>(_fn: PH, list: List<T>): $_list_01<T>;
    <T, U>(fn: Morphism<T, U>, functor: Functor<T>): $_functor_11<U>;
    <T>(_fn: PH, functor: Functor<T>): $_functor_01<T>;
    <T, U>(fn: Morphism<T, U>): $_10<T, U>;
};
type $_10<T, U> = {
    (list: List<T>): $_list_11<U>;
    (functor: Functor<T>): $_functor_11<U>;
};
type $_list_01<T> = {
    <U>(fn: Morphism<T, U>): $_list_11<U>;
};
type $_functor_01<T> = {
    <U>(fn: Morphism<T, U>): $_functor_11<U>;
};
type $_list_11<U> = U[];
type $_functor_11<U> = Functor<U>;
"
`;

exports[`generics + multi-parameters + return-generics should transform correctly with selectable 1`] = `
"type $_00 = {
    <T, U>(fn: Morphism<T, U>, list: List<T>): $_list_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"list\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => $_list_11<U>;
    <T, U>(fn: Morphism<T, U>, functor: Functor<T>): $_functor_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"functor\\">(): <T, U>(fn: Morphism<T, U>, functor: Functor<T>) => $_functor_11<U>;
    <T, U>(fn: Morphism<T, U>): $_10<T, U>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_10<T, U>;
};
type $_10<T, U> = {
    (list: List<T>): $_list_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): (list: List<T>) => $_list_11<U>;
    (functor: Functor<T>): $_functor_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"functor\\">(): (functor: Functor<T>) => $_functor_11<U>;
};
type $_list_01<T> = {
    <U>(fn: Morphism<T, U>): $_list_11<U>;
};
type $_functor_01<T> = {
    <U>(fn: Morphism<T, U>): $_functor_11<U>;
};
type $_list_11<U> = U[];
type $_functor_11<U> = Functor<U>;
"
`;

exports[`generics + multi-parameters + return-generics should transform correctly without any options 1`] = `
"type $_00 = {
    <T, U>(fn: Morphism<T, U>, list: List<T>): $_list_11<U>;
    <T, U>(fn: Morphism<T, U>, functor: Functor<T>): $_functor_11<U>;
    <T, U>(fn: Morphism<T, U>): $_10<T, U>;
};
type $_10<T, U> = {
    (list: List<T>): $_list_11<U>;
    (functor: Functor<T>): $_functor_11<U>;
};
type $_list_01<T> = {
    <U>(fn: Morphism<T, U>): $_list_11<U>;
};
type $_functor_01<T> = {
    <U>(fn: Morphism<T, U>): $_functor_11<U>;
};
type $_list_11<U> = U[];
type $_functor_11<U> = Functor<U>;
"
`;

exports[`generics + multi-parameters should transform correctly with every option 1`] = `
"type $_0 = {
    (str: string): $_string_1;
    <$SEL extends \\"1\\", $KIND extends \\"string\\">(): (str: string) => $_string_1;
    <T>(list: List<T>): $_list_1<T>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): <T>(list: List<T>) => $_list_1<T>;
};
type $_string_1 = string;
type $_list_1<T> = T | undefined;
"
`;

exports[`generics + multi-parameters should transform correctly with placeholder 1`] = `
"type $_0 = {
    (str: string): $_string_1;
    <T>(list: List<T>): $_list_1<T>;
};
type $_string_1 = string;
type $_list_1<T> = T | undefined;
"
`;

exports[`generics + multi-parameters should transform correctly with selectable 1`] = `
"type $_0 = {
    (str: string): $_string_1;
    <$SEL extends \\"1\\", $KIND extends \\"string\\">(): (str: string) => $_string_1;
    <T>(list: List<T>): $_list_1<T>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): <T>(list: List<T>) => $_list_1<T>;
};
type $_string_1 = string;
type $_list_1<T> = T | undefined;
"
`;

exports[`generics + multi-parameters should transform correctly without any options 1`] = `
"type $_0 = {
    (str: string): $_string_1;
    <T>(list: List<T>): $_list_1<T>;
};
type $_string_1 = string;
type $_list_1<T> = T | undefined;
"
`;

exports[`merge-non-conflicts should return correctly with mergable types 1`] = `
"type $_00 = {
    <T, U extends List<T>>(fn: (x: T) => T, container: U): $_list_11<T, U>;
    <T, U extends Dictionary<T>>(fn: (x: T) => T, container: U): $_object_11<T, U>;
    <T>(fn: (x: T) => T): $_10<T>;
};
type $_10<T> = {
    <U extends List<T>>(container: U): $_list_11<T, U>;
    <U extends Dictionary<T>>(container: U): $_object_11<T, U>;
};
type $_list_01<T, U extends List<T>> = {
    (fn: (x: T) => T): $_list_11<T, U>;
};
type $_object_01<T, U extends Dictionary<T>> = {
    (fn: (x: T) => T): $_object_11<T, U>;
};
type $_list_11<T, U extends List<T>> = U;
type $_object_11<T, U extends Dictionary<T>> = U;
"
`;

exports[`merge-non-conflicts should return correctly with un-mergable types 1`] = `
"type $_00 = {
    <T, U extends List<T>>(fn: (x: T) => T, container: U): $_list_11<T, U>;
    <T>(fn: (x: T) => T): $_list_10<T>;
    <X, Y extends Dictionary<X>>(fn: (x: X) => X, container: Y): $_object_11<X, Y>;
    <X>(fn: (x: X) => X): $_object_10<X>;
};
type $_list_10<T> = {
    <U extends List<T>>(container: U): $_list_11<T, U>;
};
type $_object_10<X> = {
    <Y extends Dictionary<X>>(container: Y): $_object_11<X, Y>;
};
type $_list_01<T, U extends List<T>> = {
    (fn: (x: T) => T): $_list_11<T, U>;
};
type $_object_01<X, Y extends Dictionary<X>> = {
    (fn: (x: X) => X): $_object_11<X, Y>;
};
type $_list_11<T, U extends List<T>> = U;
type $_object_11<X, Y extends Dictionary<X>> = Y;
"
`;

exports[`non-generics should transform correctly with every option 1`] = `
"type $_00 = {
    (a: number, b: number): $_number_11;
    <$SEL extends \\"11\\", $KIND extends \\"number\\">(): (a: number, b: number) => $_number_11;
    (a: number): $_number_10;
    <$SEL extends \\"1\\", $KIND extends \\"number\\">(): (a: number) => $_number_10;
    (_a: PH, b: number): $_number_01;
    <$SEL extends \\"01\\", $KIND extends \\"number\\">(): (_a: PH, b: number) => $_number_01;
    (a: string, b: string): $_string_11;
    <$SEL extends \\"11\\", $KIND extends \\"string\\">(): (a: string, b: string) => $_string_11;
    (a: string): $_string_10;
    <$SEL extends \\"1\\", $KIND extends \\"string\\">(): (a: string) => $_string_10;
    (_a: PH, b: string): $_string_01;
    <$SEL extends \\"01\\", $KIND extends \\"string\\">(): (_a: PH, b: string) => $_string_01;
};
type $_number_10 = {
    (b: number): $_number_11;
};
type $_string_10 = {
    (b: string): $_string_11;
};
type $_number_01 = {
    (a: number): $_number_11;
};
type $_string_01 = {
    (a: string): $_string_11;
};
type $_number_11 = boolean;
type $_string_11 = boolean;
"
`;

exports[`non-generics should transform correctly with placeholder 1`] = `
"type $_00 = {
    (a: number, b: number): $_number_11;
    (a: number): $_number_10;
    (_a: PH, b: number): $_number_01;
    (a: string, b: string): $_string_11;
    (a: string): $_string_10;
    (_a: PH, b: string): $_string_01;
};
type $_number_10 = {
    (b: number): $_number_11;
};
type $_string_10 = {
    (b: string): $_string_11;
};
type $_number_01 = {
    (a: number): $_number_11;
};
type $_string_01 = {
    (a: string): $_string_11;
};
type $_number_11 = boolean;
type $_string_11 = boolean;
"
`;

exports[`non-generics should transform correctly with selectable 1`] = `
"type $_00 = {
    (a: number, b: number): $_number_11;
    <$SEL extends \\"11\\", $KIND extends \\"number\\">(): (a: number, b: number) => $_number_11;
    (a: number): $_number_10;
    <$SEL extends \\"1\\", $KIND extends \\"number\\">(): (a: number) => $_number_10;
    (a: string, b: string): $_string_11;
    <$SEL extends \\"11\\", $KIND extends \\"string\\">(): (a: string, b: string) => $_string_11;
    (a: string): $_string_10;
    <$SEL extends \\"1\\", $KIND extends \\"string\\">(): (a: string) => $_string_10;
};
type $_number_10 = {
    (b: number): $_number_11;
};
type $_string_10 = {
    (b: string): $_string_11;
};
type $_number_01 = {
    (a: number): $_number_11;
};
type $_string_01 = {
    (a: string): $_string_11;
};
type $_number_11 = boolean;
type $_string_11 = boolean;
"
`;

exports[`non-generics should transform correctly without any options 1`] = `
"type $_00 = {
    (a: number, b: number): $_number_11;
    (a: number): $_number_10;
    (a: string, b: string): $_string_11;
    (a: string): $_string_10;
};
type $_number_10 = {
    (b: number): $_number_11;
};
type $_string_10 = {
    (b: string): $_string_11;
};
type $_number_01 = {
    (a: number): $_number_11;
};
type $_string_01 = {
    (a: string): $_string_11;
};
type $_number_11 = boolean;
type $_string_11 = boolean;
"
`;
