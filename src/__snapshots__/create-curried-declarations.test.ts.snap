// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should inline return type correctly with inline_return_type = true and type = FunctionType 1`] = `
"declare const $: $_000;
type $_000 = {
    <T, U>(fn: Morphism<T, U>): $_100<T, U>;
    (_fn: PH, index: number): $_010;
    <T, U>(fn: Morphism<T, U>, index: number): $_110<T, U>;
    <T>(_fn: PH, _index: PH, list: List<T>): $_001<T>;
    <T>(_fn: PH, index: number, list: List<T>): $_011<T>;
    <T, U>(fn: Morphism<T, U>, _index: PH, list: List<T>): $_101<T, U>;
    <$SEL extends \\"111\\">(): <T, U>(fn: Morphism<T, U>, index: number, list: List<T>) => (T | U)[];
    <$SEL extends \\"101\\">(): <T, U>(fn: Morphism<T, U>, _index: PH, list: List<T>) => $_101<T, U>;
    <$SEL extends \\"011\\">(): <T>(_fn: PH, index: number, list: List<T>) => $_011<T>;
    <$SEL extends \\"001\\">(): <T>(_fn: PH, _index: PH, list: List<T>) => $_001<T>;
    <$SEL extends \\"11\\">(): <T, U>(fn: Morphism<T, U>, index: number) => $_110<T, U>;
    <$SEL extends \\"01\\">(): (_fn: PH, index: number) => $_010;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_100<T, U>;
    <T, U>(fn: Morphism<T, U>, index: number, list: List<T>): (T | U)[];
};
type $_100<T, U> = {
    (index: number): $_110<T, U>;
    (_index: PH, list: List<T>): $_101<T, U>;
    <$SEL extends \\"11\\">(): (index: number, list: List<T>) => (T | U)[];
    <$SEL extends \\"01\\">(): (_index: PH, list: List<T>) => $_101<T, U>;
    <$SEL extends \\"1\\">(): (index: number) => $_110<T, U>;
    (index: number, list: List<T>): (T | U)[];
};
type $_010 = {
    <T, U>(fn: Morphism<T, U>): $_110<T, U>;
    <T>(_fn: PH, list: List<T>): $_011<T>;
    <$SEL extends \\"11\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => (T | U)[];
    <$SEL extends \\"01\\">(): <T>(_fn: PH, list: List<T>) => $_011<T>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_110<T, U>;
    <T, U>(fn: Morphism<T, U>, list: List<T>): (T | U)[];
};
type $_110<T, U> = {
    (list: List<T>): (T | U)[];
};
type $_001<T> = {
    <U>(fn: Morphism<T, U>): $_101<T, U>;
    (_fn: PH, index: number): $_011<T>;
    <$SEL extends \\"11\\">(): <U>(fn: Morphism<T, U>, index: number) => (T | U)[];
    <$SEL extends \\"01\\">(): (_fn: PH, index: number) => $_011<T>;
    <$SEL extends \\"1\\">(): <U>(fn: Morphism<T, U>) => $_101<T, U>;
    <U>(fn: Morphism<T, U>, index: number): (T | U)[];
};
type $_101<T, U> = {
    (index: number): (T | U)[];
};
type $_011<T> = {
    <U>(fn: Morphism<T, U>): (T | U)[];
};
"
`;

exports[`should inline return type correctly with inline_return_type = true and type = FunctionType contains type predicate 1`] = `
"declare const $: $_000;
type $_000 = {
    <T>(constructor: Constructor<T>): $_100<T>;
    <K extends string>(_constructor: PH, key: K): $_010<K>;
    <T, K extends string>(constructor: Constructor<T>, key: K): $_110<T, K>;
    <U extends {}>(_constructor: PH, _key: PH, object: U): $_001<U>;
    <U extends {}, K extends string>(_constructor: PH, key: K, object: U): $_011<U, K>;
    <T, U extends {}>(constructor: Constructor<T>, _key: PH, object: U): $_101<T, U>;
    <$SEL extends \\"111\\">(): <T, U extends {}, K extends string>(constructor: Constructor<T>, key: K, object: U) => object is U & Record<K, T>;
    <$SEL extends \\"101\\">(): <T, U extends {}>(constructor: Constructor<T>, _key: PH, object: U) => $_101<T, U>;
    <$SEL extends \\"011\\">(): <U extends {}, K extends string>(_constructor: PH, key: K, object: U) => $_011<U, K>;
    <$SEL extends \\"001\\">(): <U extends {}>(_constructor: PH, _key: PH, object: U) => $_001<U>;
    <$SEL extends \\"11\\">(): <T, K extends string>(constructor: Constructor<T>, key: K) => $_110<T, K>;
    <$SEL extends \\"01\\">(): <K extends string>(_constructor: PH, key: K) => $_010<K>;
    <$SEL extends \\"1\\">(): <T>(constructor: Constructor<T>) => $_100<T>;
    <T, U extends {}, K extends string>(constructor: Constructor<T>, key: K, object: U): object is U & Record<K, T>;
};
type $_100<T> = {
    <K extends string>(key: K): $_110<T, K>;
    <U extends {}>(_key: PH, object: U): $_101<T, U>;
    <$SEL extends \\"11\\">(): <U extends {}, K extends string>(key: K, object: U) => object is U & Record<K, T>;
    <$SEL extends \\"01\\">(): <U extends {}>(_key: PH, object: U) => $_101<T, U>;
    <$SEL extends \\"1\\">(): <K extends string>(key: K) => $_110<T, K>;
    <U extends {}, K extends string>(key: K, object: U): object is U & Record<K, T>;
};
type $_010<K extends string> = {
    <T>(constructor: Constructor<T>): $_110<T, K>;
    <U extends {}>(_constructor: PH, object: U): $_011<U, K>;
    <$SEL extends \\"11\\">(): <T, U extends {}>(constructor: Constructor<T>, object: U) => object is U & Record<K, T>;
    <$SEL extends \\"01\\">(): <U extends {}>(_constructor: PH, object: U) => $_011<U, K>;
    <$SEL extends \\"1\\">(): <T>(constructor: Constructor<T>) => $_110<T, K>;
    <T, U extends {}>(constructor: Constructor<T>, object: U): object is U & Record<K, T>;
};
type $_110<T, K extends string> = {
    <U extends {}>(object: U): object is U & Record<K, T>;
};
type $_001<U extends {}> = {
    <T>(constructor: Constructor<T>): $_101<T, U>;
    <K extends string>(_constructor: PH, key: K): $_011<U, K>;
    <$SEL extends \\"11\\">(): <T, K extends string>(constructor: Constructor<T>, key: K) => boolean;
    <$SEL extends \\"01\\">(): <K extends string>(_constructor: PH, key: K) => $_011<U, K>;
    <$SEL extends \\"1\\">(): <T>(constructor: Constructor<T>) => $_101<T, U>;
    <T, K extends string>(constructor: Constructor<T>, key: K): boolean;
};
type $_101<T, U extends {}> = {
    <K extends string>(key: K): boolean;
};
type $_011<U extends {}, K extends string> = {
    <T>(constructor: Constructor<T>): boolean;
};
"
`;

exports[`should inline return type correctly with inline_return_type = true and type = Record<string, FunctionType> 1`] = `
"declare const $: $_00;
type $_00 = {
    <T, U>(fn: Morphism<T, U>): $_10<T, U>;
    <T>(_fn: PH, list: List<T>): $_list_01<T>;
    <T>(_fn: PH, functor: Functor<T>): $_functor_01<T>;
    <T, U>(fn: Morphism<T, U>, list: List<T>): U[];
    <$SEL extends \\"11\\", $KIND extends \\"functor\\">(): <T, U>(fn: Morphism<T, U>, functor: Functor<T>) => Functor<U>;
    <$SEL extends \\"11\\", $KIND extends \\"list\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => U[];
    <$SEL extends \\"01\\", $KIND extends \\"functor\\">(): <T>(_fn: PH, functor: Functor<T>) => $_functor_01<T>;
    <$SEL extends \\"01\\", $KIND extends \\"list\\">(): <T>(_fn: PH, list: List<T>) => $_list_01<T>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_10<T, U>;
    <T, U>(fn: Morphism<T, U>, functor: Functor<T>): Functor<U>;
};
type $_10<T, U> = {
    (list: List<T>): U[];
    <$SEL extends \\"1\\", $KIND extends \\"functor\\">(): (functor: Functor<T>) => Functor<U>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): (list: List<T>) => U[];
    (functor: Functor<T>): Functor<U>;
};
type $_list_01<T> = {
    <U>(fn: Morphism<T, U>): U[];
};
type $_functor_01<T> = {
    <U>(fn: Morphism<T, U>): Functor<U>;
};
"
`;

exports[`should inline return type correctly with inline_return_type = true and type = Record<string, FunctionType> contains all_various 1`] = `
"declare const $: $_0;
type $_0 = {
    (str: string): string;
    <T>(list: List<T>): T[];
    <$SEL extends \\"1\\", $KIND extends \\"mixed\\">(): <T>(list: string | List<T>) => string | T[];
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): <T>(list: List<T>) => T[];
    <$SEL extends \\"1\\", $KIND extends \\"string\\">(): (str: string) => string;
    <T>(list: string | List<T>): string | T[];
};
"
`;

exports[`should omit unnecessary types with placeholder = false and type = FunctionType 1`] = `
"declare const $: $_000;
type $_000 = {
    <T, U>(fn: Morphism<T, U>): $_100<T, U>;
    <T, U>(fn: Morphism<T, U>, index: number): $_110<T, U>;
    <$SEL extends \\"111\\">(): <T, U>(fn: Morphism<T, U>, index: number, list: List<T>) => $_111<T, U>;
    <$SEL extends \\"11\\">(): <T, U>(fn: Morphism<T, U>, index: number) => $_110<T, U>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_100<T, U>;
    <T, U>(fn: Morphism<T, U>, index: number, list: List<T>): $_111<T, U>;
};
type $_100<T, U> = {
    (index: number): $_110<T, U>;
    <$SEL extends \\"11\\">(): (index: number, list: List<T>) => $_111<T, U>;
    <$SEL extends \\"1\\">(): (index: number) => $_110<T, U>;
    (index: number, list: List<T>): $_111<T, U>;
};
type $_110<T, U> = {
    (list: List<T>): $_111<T, U>;
};
type $_111<T, U> = (T | U)[];
"
`;

exports[`should omit unnecessary types with placeholder = false and type = Record<string, FunctionType> 1`] = `
"declare const $: $_00;
type $_00 = {
    <T, U>(fn: Morphism<T, U>): $_10<T, U>;
    <T, U>(fn: Morphism<T, U>, list: List<T>): $_list_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"functor\\">(): <T, U>(fn: Morphism<T, U>, functor: Functor<T>) => $_functor_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"list\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => $_list_11<U>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_10<T, U>;
    <T, U>(fn: Morphism<T, U>, functor: Functor<T>): $_functor_11<U>;
};
type $_10<T, U> = {
    (list: List<T>): $_list_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"functor\\">(): (functor: Functor<T>) => $_functor_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): (list: List<T>) => $_list_11<U>;
    (functor: Functor<T>): $_functor_11<U>;
};
type $_list_11<U> = U[];
type $_functor_11<U> = Functor<U>;
"
`;

exports[`should remove non-hoist kind in non-conflict types and remove hoist kind in selectable types with hoist_name = string  and type = Record<string, FunctionType> contains all_various 1`] = `
"declare const $: $_0;
type $_0 = {
    <$SEL extends \\"1\\", $KIND extends \\"mixed\\">(): <T>(list: string | List<T>) => $_mixed_1<T>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): <T>(list: List<T>) => $_list_1<T>;
    <$SEL extends \\"1\\", $KIND extends \\"string\\">(): (str: string) => $_string_1;
    <T>(list: string | List<T>): $_mixed_1<T>;
};
type $_string_1 = string;
type $_list_1<T> = T[];
type $_mixed_1<T> = string | T[];
"
`;

exports[`should remove non-hoist kind in non-conflict types and remove hoist kind in selectable types with hoist_name = string  and type = Record<string, FunctionType> contains various_mixed 1`] = `
"declare const $: $_00;
type $_00 = {
    <T, U>(fn: Morphism<T, U>): $_10<T, U>;
    <T>(_fn: PH, target: List<T> | Functor<T>): $_mixed_01<T>;
    <$SEL extends \\"11\\", $KIND extends \\"mixed\\">(): <T, U>(fn: Morphism<T, U>, target: List<T> | Functor<T>) => $_mixed_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"functor\\">(): <T, U>(fn: Morphism<T, U>, functor: Functor<T>) => $_functor_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"list\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => $_list_11<U>;
    <$SEL extends \\"01\\", $KIND extends \\"mixed\\">(): <T>(_fn: PH, target: List<T> | Functor<T>) => $_mixed_01<T>;
    <$SEL extends \\"01\\", $KIND extends \\"functor\\">(): <T>(_fn: PH, functor: Functor<T>) => $_functor_01<T>;
    <$SEL extends \\"01\\", $KIND extends \\"list\\">(): <T>(_fn: PH, list: List<T>) => $_list_01<T>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_10<T, U>;
    <T, U>(fn: Morphism<T, U>, target: List<T> | Functor<T>): $_mixed_11<U>;
};
type $_10<T, U> = {
    <$SEL extends \\"1\\", $KIND extends \\"mixed\\">(): (target: List<T> | Functor<T>) => $_mixed_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"functor\\">(): (functor: Functor<T>) => $_functor_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): (list: List<T>) => $_list_11<U>;
    (target: List<T> | Functor<T>): $_mixed_11<U>;
};
type $_list_01<T> = {
    <U>(fn: Morphism<T, U>): $_list_11<U>;
};
type $_functor_01<T> = {
    <U>(fn: Morphism<T, U>): $_functor_11<U>;
};
type $_mixed_01<T> = {
    <U>(fn: Morphism<T, U>): $_mixed_11<U>;
};
type $_list_11<U> = U[];
type $_functor_11<U> = Functor<U>;
type $_mixed_11<U> = U[] | Functor<U>;
"
`;

exports[`should transform correctly with type = FunctionType 1`] = `
"declare const $: $_000;
type $_000 = {
    <T, U>(fn: Morphism<T, U>): $_100<T, U>;
    (_fn: PH, index: number): $_010;
    <T, U>(fn: Morphism<T, U>, index: number): $_110<T, U>;
    <T>(_fn: PH, _index: PH, list: List<T>): $_001<T>;
    <T>(_fn: PH, index: number, list: List<T>): $_011<T>;
    <T, U>(fn: Morphism<T, U>, _index: PH, list: List<T>): $_101<T, U>;
    <$SEL extends \\"111\\">(): <T, U>(fn: Morphism<T, U>, index: number, list: List<T>) => $_111<T, U>;
    <$SEL extends \\"101\\">(): <T, U>(fn: Morphism<T, U>, _index: PH, list: List<T>) => $_101<T, U>;
    <$SEL extends \\"011\\">(): <T>(_fn: PH, index: number, list: List<T>) => $_011<T>;
    <$SEL extends \\"001\\">(): <T>(_fn: PH, _index: PH, list: List<T>) => $_001<T>;
    <$SEL extends \\"11\\">(): <T, U>(fn: Morphism<T, U>, index: number) => $_110<T, U>;
    <$SEL extends \\"01\\">(): (_fn: PH, index: number) => $_010;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_100<T, U>;
    <T, U>(fn: Morphism<T, U>, index: number, list: List<T>): $_111<T, U>;
};
type $_100<T, U> = {
    (index: number): $_110<T, U>;
    (_index: PH, list: List<T>): $_101<T, U>;
    <$SEL extends \\"11\\">(): (index: number, list: List<T>) => $_111<T, U>;
    <$SEL extends \\"01\\">(): (_index: PH, list: List<T>) => $_101<T, U>;
    <$SEL extends \\"1\\">(): (index: number) => $_110<T, U>;
    (index: number, list: List<T>): $_111<T, U>;
};
type $_010 = {
    <T, U>(fn: Morphism<T, U>): $_110<T, U>;
    <T>(_fn: PH, list: List<T>): $_011<T>;
    <$SEL extends \\"11\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => $_111<T, U>;
    <$SEL extends \\"01\\">(): <T>(_fn: PH, list: List<T>) => $_011<T>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_110<T, U>;
    <T, U>(fn: Morphism<T, U>, list: List<T>): $_111<T, U>;
};
type $_110<T, U> = {
    (list: List<T>): $_111<T, U>;
};
type $_001<T> = {
    <U>(fn: Morphism<T, U>): $_101<T, U>;
    (_fn: PH, index: number): $_011<T>;
    <$SEL extends \\"11\\">(): <U>(fn: Morphism<T, U>, index: number) => $_111<T, U>;
    <$SEL extends \\"01\\">(): (_fn: PH, index: number) => $_011<T>;
    <$SEL extends \\"1\\">(): <U>(fn: Morphism<T, U>) => $_101<T, U>;
    <U>(fn: Morphism<T, U>, index: number): $_111<T, U>;
};
type $_101<T, U> = {
    (index: number): $_111<T, U>;
};
type $_011<T> = {
    <U>(fn: Morphism<T, U>): $_111<T, U>;
};
type $_111<T, U> = (T | U)[];
"
`;

exports[`should transform correctly with type = Record<string, FunctionType> (= 1 key) 1`] = `
"declare const $: $_000;
type $_000 = {
    <T, U>(fn: Morphism<T, U>): $_100<T, U>;
    (_fn: PH, index: number): $_010;
    <T, U>(fn: Morphism<T, U>, index: number): $_110<T, U>;
    <T>(_fn: PH, _index: PH, list: List<T>): $_001<T>;
    <T>(_fn: PH, index: number, list: List<T>): $_011<T>;
    <T, U>(fn: Morphism<T, U>, _index: PH, list: List<T>): $_101<T, U>;
    <$SEL extends \\"111\\">(): <T, U>(fn: Morphism<T, U>, index: number, list: List<T>) => $_111<T, U>;
    <$SEL extends \\"101\\">(): <T, U>(fn: Morphism<T, U>, _index: PH, list: List<T>) => $_101<T, U>;
    <$SEL extends \\"011\\">(): <T>(_fn: PH, index: number, list: List<T>) => $_011<T>;
    <$SEL extends \\"001\\">(): <T>(_fn: PH, _index: PH, list: List<T>) => $_001<T>;
    <$SEL extends \\"11\\">(): <T, U>(fn: Morphism<T, U>, index: number) => $_110<T, U>;
    <$SEL extends \\"01\\">(): (_fn: PH, index: number) => $_010;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_100<T, U>;
    <T, U>(fn: Morphism<T, U>, index: number, list: List<T>): $_111<T, U>;
};
type $_100<T, U> = {
    (index: number): $_110<T, U>;
    (_index: PH, list: List<T>): $_101<T, U>;
    <$SEL extends \\"11\\">(): (index: number, list: List<T>) => $_111<T, U>;
    <$SEL extends \\"01\\">(): (_index: PH, list: List<T>) => $_101<T, U>;
    <$SEL extends \\"1\\">(): (index: number) => $_110<T, U>;
    (index: number, list: List<T>): $_111<T, U>;
};
type $_010 = {
    <T, U>(fn: Morphism<T, U>): $_110<T, U>;
    <T>(_fn: PH, list: List<T>): $_011<T>;
    <$SEL extends \\"11\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => $_111<T, U>;
    <$SEL extends \\"01\\">(): <T>(_fn: PH, list: List<T>) => $_011<T>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_110<T, U>;
    <T, U>(fn: Morphism<T, U>, list: List<T>): $_111<T, U>;
};
type $_110<T, U> = {
    (list: List<T>): $_111<T, U>;
};
type $_001<T> = {
    <U>(fn: Morphism<T, U>): $_101<T, U>;
    (_fn: PH, index: number): $_011<T>;
    <$SEL extends \\"11\\">(): <U>(fn: Morphism<T, U>, index: number) => $_111<T, U>;
    <$SEL extends \\"01\\">(): (_fn: PH, index: number) => $_011<T>;
    <$SEL extends \\"1\\">(): <U>(fn: Morphism<T, U>) => $_101<T, U>;
    <U>(fn: Morphism<T, U>, index: number): $_111<T, U>;
};
type $_101<T, U> = {
    (index: number): $_111<T, U>;
};
type $_011<T> = {
    <U>(fn: Morphism<T, U>): $_111<T, U>;
};
type $_111<T, U> = (T | U)[];
"
`;

exports[`should transform correctly with type = Record<string, FunctionType> (> 1 key) 1`] = `
"declare const $: $_00;
type $_00 = {
    <T, U>(fn: Morphism<T, U>): $_10<T, U>;
    <T>(_fn: PH, list: List<T>): $_list_01<T>;
    <T>(_fn: PH, functor: Functor<T>): $_functor_01<T>;
    <T, U>(fn: Morphism<T, U>, list: List<T>): $_list_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"functor\\">(): <T, U>(fn: Morphism<T, U>, functor: Functor<T>) => $_functor_11<U>;
    <$SEL extends \\"11\\", $KIND extends \\"list\\">(): <T, U>(fn: Morphism<T, U>, list: List<T>) => $_list_11<U>;
    <$SEL extends \\"01\\", $KIND extends \\"functor\\">(): <T>(_fn: PH, functor: Functor<T>) => $_functor_01<T>;
    <$SEL extends \\"01\\", $KIND extends \\"list\\">(): <T>(_fn: PH, list: List<T>) => $_list_01<T>;
    <$SEL extends \\"1\\">(): <T, U>(fn: Morphism<T, U>) => $_10<T, U>;
    <T, U>(fn: Morphism<T, U>, functor: Functor<T>): $_functor_11<U>;
};
type $_10<T, U> = {
    (list: List<T>): $_list_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"functor\\">(): (functor: Functor<T>) => $_functor_11<U>;
    <$SEL extends \\"1\\", $KIND extends \\"list\\">(): (list: List<T>) => $_list_11<U>;
    (functor: Functor<T>): $_functor_11<U>;
};
type $_list_01<T> = {
    <U>(fn: Morphism<T, U>): $_list_11<U>;
};
type $_functor_01<T> = {
    <U>(fn: Morphism<T, U>): $_functor_11<U>;
};
type $_list_11<U> = U[];
type $_functor_11<U> = Functor<U>;
"
`;
